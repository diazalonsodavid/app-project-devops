name: Repository Dispatch
on:
  repository_dispatch:
    types: [trigger-cd]
    #on:
  push:
    branches:
      - 'main'

jobs:
  trigger-cd:
    name: Deploy Site
    runs-on: ubuntu-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        do_token: ${{ secrets.DO_TOKEN }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3.3.0
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
       token: ${{ secrets.DO_TOKEN }}

    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2.0.3
    
    - name: Terraform init, plan and apply
      run: |
        echo `pwd` 
        cd terraform
        echo "tfpath ${{ github.event.inputs.tfpath }}"
        echo "** Running Terraform Init**"
        terraform init

        echo "** Running Terraform Validate**"
        terraform validate

        echo "** Running Terraform Apply**"
        terraform apply -auto-approve -var="do_token=${{ secrets.DO_TOKEN }}"
    
    - name: Save kubeconfig
      run: doctl kubernetes cluster kubeconfig save bootcamp-project
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    
    - name: Set up kubectl
      uses: matootie/dokube@v1.4.0
      with:
        personalAccessToken: ${{ secrets.DO_TOKEN }}
        clusterName: bootcamp-project
    
    # Run any kubectl commands you want!
    - name: Deploy MySQL
      run: |        
         cd mysql-helm
         helm upgrade --install --atomic app-bootcamp --namespace ${{ vars.NAMESPACE }} . --create-namespace
    
#    - name: Create Secret
#      run: |
#        kubectl -n ${{ vars.NAMESPACE }} create secret docker-registry app-bootcamp \
#        --docker-server=ghcr.io \
#        --docker-username=${{ vars.DOCKER_USER }} \
#        --docker-password=${{ secrets.DOCKER_PASS }}  \
#        --docker-email=${{ vars.DOCKER_EMAIL }}
    
    - name: Deploy App
      run: |
        cd app-k8s
        kubectl apply -f deployment.yaml -n ${{ vars.NAMESPACE }}
    
    - name: Create Servide
      run: |
        cd app-k8s
        kubectl apply -f service.yaml -n ${{ vars.NAMESPACE }}
